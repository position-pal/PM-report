{"/PM-report/attachments/1-pos/": {
    "title": "Allegato 1 - Project Overview Statement",
    "keywords": "",
    "url": "/PM-report/attachments/1-pos/",
    "body": "Opportunit√† Da un‚Äôindagine di mercato √® emersa la presenza di applicativi gi√† esistenti per questo ambito. Tuttavia, dall‚Äôanalisi di questi ultimi √® affiorata la possibilit√† di fornire una versione open source, che al contempo permetta al gruppo di impratichirsi con tecnologie e metodologie avanzate, cercando di migliorare l‚Äôesperienza utente. Scopo del progetto Lo scopo del progetto √® l‚Äôimplementazione di un sistema di tracciamento e condivisione, in tempo reale, della posizione e di un‚Äôinformazione di stato tra gruppi di utenti fidati. Obiettivi Qui di seguito vengono descritti i principali obiettivi del progetto: Organizzazione, configurazione e inizializzazione dei workspace con un adeguato build tool, di un‚Äôinfrastruttura con predisposizione a una pipeline automatizzata di continuous integration &amp; deployment. Progettazione e implementazione di un servizio per la gestione utente che deve occuparsi di tutti gli aspetti relativi all‚Äôautenticazione, sia per quanto riguarda l‚Äôiscrizione, sia per il log-in, a cui va aggiunta la creazione e il mantenimento dei gruppi e lo stato in tempo reale. Progettazione e implementazione di un servizio di localizzazione che permetta di geolocalizzare un utente in tempo reale, individuare coordinate a partire da indirizzi / luoghi ed esporre un‚ÄôAPI per impostare notifiche quando l‚Äôutente arriva in prossimit√† di una certa posizione. Progettazione e implementazione di un servizio di chat che permetta di conversare in tempo reale con un singolo o un gruppo ristretto di utenti con la quale si vuole condividere la propria posizione e stato. Questo permetter√† all‚Äôutente di avere una comunicazione pi√π diretta e immediata con i membri del gruppo. Conditions of Satisfactions Il sistema deve essere completato entro Luglio 2024; Utilizzo di architettura a micro-servizi e di tool di orchestrazione come Kubernetes; Utilizzo di approccio Domain e Test Driven (DDD e TDD); Organizzazione di focus group per raccolta di feedback sulla user experience. Success Criteria Il downtime del sistema deve essere minore dell‚Äô1% rispetto al tempo di attivit√†; I costi del progetto per servizi esterni e tecnologie non devono eccedere 100‚Ç¨; Tutti i requisiti funzionali devono essere soddisfatti e verificati mediante test automatici; La copertura del codice del dominio deve essere &gt; 90%. Rischi Un elenco dei principali rischi che ci si assumerebbero sono elencati qui di seguito: il team non ha esperienza nella progettazione e sviluppo di applicazioni con architettura a micro-servizi; il team ha limitata esperienza riguardo l‚Äôutilizzo di tecnologie e strumenti per il continuous depoloyment in ambienti di produzione; il sistema finale potrebbe avere meno appeal rispetto a quello dei competitor nel mercato. L‚Äôanalisi e la gestione del rischio √® trattata Allegato 3 - Analisi dei rischi Milestone Si prevede di rilasciare i servizi in questo ordine: predisposizione infrastruttura di continuous integration &amp; deployment; sotto-sistema autenticazione e gestione gruppi; sotto-sistema di localizzazione; sotto-sistema di notifiche; sotto-sistema di chat. predisposizione di un sistema di diagnosi e monitoraggio."
  },"/PM-report/attachments/2-rbs/": {
    "title": "Allegato 2 - Requirements Breakdown Structure",
    "keywords": "",
    "url": "/PM-report/attachments/2-rbs/",
    "body": "Event Storming üöß TODO: Riportare diagramma event storming Work Breakdown Structure Vengono qui di seguito esplosi i requisiti del sistema, a partire dagli obiettivi definiti nel POS e sulla base dell‚ÄôEvent Storming effettuato , nel formato di una Requirements Breakdown Structure. ‚ÑπÔ∏è Info Di seguito √® riportata una versione testuale dello schema. Progettazione, inizializzazione e configurazione dei workspace con un adeguato build tool, di un‚Äôinfrastruttura con predisposizione a una pipeline automatizzata di continuous integration &amp; deployment. Configurazione build tool e DVCS Configurazione pipeline di continuous integration Configurazione pipeline di continuous deployment Progettazione diagrammi deployment Creazione struttura locale minimale di orchestrazione Configurazione ambiente di produzione Sviluppo azioni deployment da locale a produzione Configurazione bot per aggiornamento automatico delle dipendenze Configurazione bot per il merge automatizzato di Pull Request sulla repo Configurazione bot per il rilascio automatico delle release Configurazione di un sistema di ticketing automatizzato Progettazione e implementazione di un servizio per la gestione utente che deve occuparsi di tutti gli aspetti relativi all‚Äôautenticazione, sia per quanto riguarda l‚Äôiscrizione, sia per il log-in, a cui va aggiunta la creazione e il mantenimento dei gruppi. Progettazione e design Configurazione ed implementazione servizio di autenticazione Configurazione DB e implementazione schemi Implementazione token di autenticazione Regole di controllo di accesso Implementazione API di autenticazione Implementazione delle feature relative ai gruppi Configurazione DB e implementazione schemi Implementazione API di gestione gruppi Scrittura della documentazione Definizione configurazione di deployment Progettazione e implementazione di un servizio di localizzazione che permetta di geolocalizzare un utente in tempo reale, individuare coordinate a partire da indirizzi / luoghi ed esporre un‚ÄôAPI per impostare notifiche quando l‚Äôutente arriva in prossimit√† di una certa posizione. Confronto di tecnologie MOM consone allo sviluppo del servizio Progettazione e design Geocoding di indirizzi / luoghi in coordinate Studio di un servizio web di mappe per il geocoding Implementazione logica Implementazione API del servizio Impostazione di notifiche di prossimit√† Tracciamento real-time e gestione della posizione Configurazione DB dati e implementazione schemi Gestione stato utente Configurazione tecnologia / protocollo scelto all‚Äôinterno del sistema Scrittura della documentazione Definizione configurazione di deployment Progettazione e implementazione di un servizio di chat che permetta di conversare in tempo reale con un singolo o un gruppo ristretto di utenti con la quale si vuole condividere la propria posizione e stato. Questo permetter√† all,‚Äôutente di avere una comunicazione pi√π diretta e immediata con i membri del gruppo. Analisi di tecnologie / protocolli per lo scambio di messaggi Analisi aspetti di sicurezza nella comunicazione in tempo reale tra pi√π utenti Implementazione servizio crittografia E2E Implementazione API del servizio Configurazione tecnologia / protocollo scelto all‚Äôinterno del sistema Implementazione funzionalit√† di chat Gestione invio notifiche Implementazione funzionalit√† amministrazione dei gruppi chat Scrittura della documentazione Definizione configurazione di deployment Sistema di notifiche Analisi di tecnologie / protocolli per l‚Äôinvio di notifiche push Implementazione API del servizio Implementazione DB e schemi Implementazione funzionalit√† di invio notifiche push Implementazione funzionalit√† di invio notifiche mail Scrittura della documentazione Definizione configurazione di deployment"
  },"/PM-report/attachments/3-costs-estimation/": {
    "title": "Allegato 3 - Stima dei costi",
    "keywords": "",
    "url": "/PM-report/attachments/3-costs-estimation/",
    "body": "NOTE: Nelle stime di implementazione consideriamo anche i costi per il testing"
  },"/PM-report/attachments/4-risk-analysis/": {
    "title": "Allegato 4 - Risk Analysis",
    "keywords": "",
    "url": "/PM-report/attachments/4-risk-analysis/",
    "body": "Identificazione dei rischi TECNICO: il team non ha esperienza nella progettazione e sviluppo di applicazioni con architettura a micro-servizi; TECNICO: il progetto richiede l‚Äôutilizzo di tecnologie e strumenti sconosciuti ai membri del team di svliuppo; TECNICO: il team ha limitata esperienza riguardo l‚Äôutilizzo di tecnologie e strumenti per il continuous depoloyment in ambienti di produzione; ORGANIZZATIVO: rischio di sforare il budget; ORGANIZZATIVO: vista la poca esperienza e altri progetti in corso provocare ritardi nella consegna; ESTERNO: il sistema finale potrebbe avere meno appeal rispetto a quello dei competitor nel mercato. Assessment Legenda: I livelli di impatto e priorit√† sono categorizzati in 4 livelli: B: Bassa M: Media A: Alta C: Critica Categoria di rischio Scope Evento # Evento Probabilit√† Impatto Priorit√† TECNICO Qualit√† TC1 Mancata qualit√† dovuta all‚Äôinesperienza del team di sviluppo 0.6 C A TECNICO Qualit√† TC2 Le tecnologie CI/CD ritardano il rilascio in produzione 0.3 A A TECNICO Qualit√† TC3 Il mal utilizzo delle tecnologie adottate provoca un deterioramento dei QoS (Quality of Services) 0.8 C C ORGANIZZATIVO Budget OR1 Sforamento del budget 0.1 M B ORGANIZZATIVO Budget OR2 Ritardi nella consegna 0.5 M M ESTERNO Mercato ES1 Il sistema finale ha meno appeal rispetto ai competitor 0.9 B B quadrantChart title Matrice dei rischi y-axis Bassa probabilita --&gt; Alta probabilita x-axis Impatto basso --&gt; Impatto alto TC1: [0.9, 0.6] TC2: [0.76, 0.3] TC3: [0.95, 0.8] OR1: [0.5, 0.1] OR2: [0.5, 0.5] ES1: [0.05 , 0.9] Gestione dei rischi Evento # Gestione Descrizione TC1 Mitigate Formazione del team sull‚Äôarchitettura a microservizi TC2 Mitigate Formazione del team sulle tecnologie CI/CD TC3 Mitigate Formazione del team sulle tecnologie presenti nel mercato OR1 Accept ¬† OR2 Contingency Planning In caso di ritardi le funzionalit√† opzionali vengono scartate ES1 Accept ¬†"
  },"/PM-report/report/1-scoping/": {
    "title": "Scoping",
    "keywords": "",
    "url": "/PM-report/report/1-scoping/",
    "body": "Contesto Luca R., Giovanni A., Luca T. sono quattro studenti di Ingegneria e Scienze Informatiche dell‚ÄôUniversit√† di Bologna che, a fronte di alcune notizie lette recentemente di ragazzi e ragazze che tornando a casa di notte in zone poco sicure della citt√† condividono la loro posizione in un gruppo WhatsApp per sostenersi e sorvegliarsi a vicenda, si sono posti come obiettivo quello di creare un sistema software open source di tracciamento della posizione specificatamente progettato e studiato per creare una rete di supporto e assistenza efficace e tempestiva, in grado di segnalare in maniera rapida una situazione di emergenza. Essendo un progetto open source nato in contesto universitario da alcuni studenti con l‚Äôobiettivo di apprendere nuove tecnologie, pattern di progettazione, nonch√© nuove metodologie di sviluppo, non c‚Äô√® un vero e proprio committente, n√© una singola figura che lo rappresenta. Al contrario, tutti i membri del team collaborano attivamente per cercare di capire e individuare al meglio tutti i possibili bisogni e desideri dell‚Äôutenza finale del prodotto. L‚Äôanalisi, in termini di project management, verter√† sulla valutazione dei criteri di successo e dei rischi che possono accompagnare alcune scelte, oltre che all‚Äôindividuazione e decomposizione delle macro-attivit√† in unit√† pi√π piccole, a cui seguir√† una stima dei tempi di lavoro previsti e i deliverables attesi. Da un punto di vista tecnico, i membri del team hanno recentemente avuto modo di seguire corsi riguardo a come progettare applicazioni software di medio/grandi dimensioni sfruttando approcci guidati dal dominio (domain-driven), architetture distribuite a micro-servizi, e hanno avuto modo di apprezzare l‚Äôimportanza di applicare metodologie di sviluppo DevOps in cui l‚Äôautomatizzazione dei processi e l‚Äôintegrazione continua di codice funzionante (working code) in produzione in maniera completamente automatizzata √® un fattore di primaria importanza. Per queste ragioni il progetto software e il suo processo di sviluppo sar√† improntato seguendo queste fondamentali linee guida. Riunione di definizione del progetto (scoping meeting) Scopo: individuazione delle aspettative e dei requisiti dell‚Äôapplicazione. Partecipanti della riunione: Membro Ruolo Luca Rubboli Facilitatore Luca Tassinari Core Team member Giovanni Antonioni Core Team member Agenda: introduzione (ad opera del facilitatore); scopo della riunione (ad opera del facilitatore); descrizione dell‚Äôopportunit√† di business; discussione delle conditions of satisfaction; descrizione dei derivable del progetto; descrizione dei requisiti e della documentazione tramite event storming; scelta del modello PMLC da seguire; bozza e approvazione del POS; Sintesi svolgimento: Per fini di brevit√†, aggreghiamo la sintesi e i risultati delle prime 3 riunioni, tenute da tutti i componenti del gruppo, nelle quali sono stati definiti gli obiettivi principali del progetto, sono stati formalizzati i requisiti e i criteri di accettazione. In dettaglio, l‚Äôanalisi √® stata raffinata incrementalmente, inizialmente definendo gli obiettivi generali del progetto, da cui sono emerse le opportunit√† e i rischi correlati; parallelamente, sono state stilate le condizioni e criteri di successo del sistema. Al fine di estrarre le principali funzionalit√† dell‚Äôapplicativo nel modo pi√π rapido ed efficace possibile, √® stato utilizzato Event Storming, una tecnica di modellazione collaborativa e visuale particolarmente utilizzata e apprezzata nel contesto di sviluppo agile e Domain-Driven. La sua potenza deriva da un gruppo eterogeneo e multidisciplinare di esperti, dagli architetti ai product owner, passando per i designer dell‚ÄôUI/UX ai tester, che, insieme, collaborano per estrarre le principali funzionalit√† e i processi che le guidano, condividendo questa conoscenza per far s√¨ che sia condivisa al di l√† dei compartimenti stagni di ciascun team. Inoltre, questo approccio consente di uniformare il linguaggio utilizzato (quello che in DDD √® detto ubiquitous language) e di sollevare e poi risolvere eventuali ambiguit√† o incomprensioni che possono emergere sin dalle prime fasi del progetto. Dopo aver introdotto brevemente quali sono i vantaggi nell‚Äôutilizzo di questa tecnica rispetto a un approccio pi√π tradizionale, √® stato quindi illustrato a tutti i componenti del gruppo come si svolge una sessione di Event Storming. Si parte da un problema o da un obiettivo e, attraverso l‚Äôuso di stickynotes colorate e markers, si procede a mappare i processi e le interazioni tra le varie entit√† coinvolte, in modo da ottenere una visione d‚Äôinsieme del sistema e delle sue interazioni. Pi√π in dettaglio, la sessione inizia con l‚Äôidentificazione dei domain event, ovvero gli eventi relativi al dominio che si sta esplorando che rappresentano qualcosa di interessante che √® accaduto (per questo si usa il passato) e che possa essere utile per il sistema. Questi vengono disposti in sequenza temporale in modo da creare una timeline che rappresenti il flusso di eventi che si verificano nel sistema. A questo punto si procede con l‚Äôidentificazione dei commands, ovvero azioni che possono essere eseguite sul sistema da parte di un attore, e delle policy con cui il sistema reagisce, andando ad arricchire la timeline seguendo il flusso di eventi e azioni. Infine si pongono in evidenza i read models, ovvero qualunque informazione che il sistema deve mostrare all‚Äôutente. La struttura da seguire viene riassunta di seguito: üìÇ Allegato Lo schema risultante dell‚ÄôEvent Storming √® riportato, insieme all‚ÄôRBS, nell‚ÄôAllegato 2 Attraverso la stesura dei requirements in una struttura gerarchica √® stato possibile identificare anche un ordine di produzione delle macro-componenti, al fine di favorire inizialmente uno sviluppo che giovi dei benefici offerti dalla continuous integration fin dall‚Äôinizio, e una struttura di testing incrementale. Essendo in uno scenario di incertezza tecnologica che necessita di una componente esplorativa, abbiamo ritenuto che il modello che pi√π si presti a queste esigenze sia quello adattativo: questa scelta permette di accogliere e adeguarsi ai cambiamenti, derivanti dalla raccolta di nuove informazioni che possono emergere durante il ciclo di vita del progetto."
  },"/PM-report/report/2-planning/": {
    "title": "Planning",
    "keywords": "",
    "url": "/PM-report/report/2-planning/",
    "body": "Dopo la fase di scoping il team ha chiari gli obiettivi del progetto e le funzionalit√† che il sistema dovr√† offrire. Per poter procedere con la fase esecutiva, comprensiva di design e implementazione, √® necessario pianificare le attivit√† da svolgere, stimarne i costi e produrre una schedula che permetta di monitorare l‚Äôavanzamento del progetto. Il progetto √® stato valutato di media complessit√† e, pertanto, ci si √® prefissati di svolgere questa fase di pianificazione in al pi√π 3 giorni lavorativi. Project Planning session Agenda: Validazione delle WBS; Stima della quantit√† di lavoro, della durata e delle risorse richieste; Creazione del diagramma delle dipendenze; Individuazione e discussione del critical path e delle date previste per il completamento del progetto e delle diverse milestone; Analisi della schedula e della sua compressione, se necessario; Identificazione dei rischi e degli eventuali piani di mitigazione; Consenso tra tutti i partecipanti"
  }}
