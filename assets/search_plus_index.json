{"/PM-report/attachments/1-pos/": {
    "title": "Allegato 1 - Project Overview Statement",
    "keywords": "",
    "url": "/PM-report/attachments/1-pos/",
    "body": "OpportunitÃ  Da unâ€™indagine di mercato Ã¨ emersa la presenza di applicativi giÃ  esistenti per questo ambito. Tuttavia, dallâ€™analisi di questi ultimi Ã¨ affiorata la possibilitÃ  di fornire una versione open source, che al contempo permetta al gruppo di impratichirsi con tecnologie e metodologie avanzate, cercando di migliorare lâ€™esperienza utente. Scopo del progetto Lo scopo del progetto Ã¨ lâ€™implementazione di un sistema di tracciamento e condivisione, in tempo reale, della posizione e di unâ€™informazione di stato tra gruppi di utenti fidati. Obiettivi Qui di seguito vengono descritti i principali obiettivi del progetto: Organizzazione, configurazione e inizializzazione dei workspace con un adeguato build tool, di unâ€™infrastruttura con predisposizione a una pipeline automatizzata di continuous integration &amp; deployment. Progettazione e implementazione di un servizio per la gestione utente che deve occuparsi di tutti gli aspetti relativi allâ€™autenticazione, sia per quanto riguarda lâ€™iscrizione, sia per il log-in, a cui va aggiunta la creazione e il mantenimento dei gruppi e lo stato in tempo reale. Progettazione e implementazione di un servizio di localizzazione che permetta di geolocalizzare un utente in tempo reale, individuare coordinate a partire da indirizzi / luoghi ed esporre unâ€™API per impostare notifiche quando lâ€™utente arriva in prossimitÃ  di una certa posizione. Progettazione e implementazione di un servizio di chat che permetta di conversare in tempo reale con un singolo o un gruppo ristretto di utenti con la quale si vuole condividere la propria posizione e stato. Questo permetterÃ  allâ€™utente di avere una comunicazione piÃ¹ diretta e immediata con i membri del gruppo. Conditions of Satisfactions Il sistema deve essere completato entro Luglio 2024; Utilizzo di architettura a micro-servizi e di tool di orchestrazione come Kubernetes; Utilizzo di approccio Domain e Test Driven (DDD e TDD); Organizzazione di focus group per raccolta di feedback sulla user experience. Success Criteria Il downtime del sistema deve essere minore dellâ€™1% rispetto al tempo di attivitÃ ; I costi del progetto per servizi esterni e tecnologie non devono eccedere 100â‚¬; Tutti i requisiti funzionali devono essere soddisfatti e verificati mediante test automatici; La copertura del codice del dominio deve essere &gt; 90%. Rischi Un elenco dei principali rischi che ci si assumerebbero sono elencati qui di seguito: il team non ha esperienza nella progettazione e sviluppo di applicazioni con architettura a micro-servizi; il team ha limitata esperienza riguardo lâ€™utilizzo di tecnologie e strumenti per il continuous depoloyment in ambienti di produzione; il sistema finale potrebbe avere meno appeal rispetto a quello dei competitor nel mercato. Lâ€™analisi e la gestione del rischio Ã¨ trattata Allegato 3 - Analisi dei rischi Milestone Si prevede di rilasciare i servizi in questo ordine: predisposizione infrastruttura di continuous integration &amp; deployment; sotto-sistema autenticazione e gestione gruppi; sotto-sistema di localizzazione; sotto-sistema di notifiche; sotto-sistema di chat. predisposizione di un sistema di diagnosi e monitoraggio."
  },"/PM-report/attachments/2-rbs/": {
    "title": "Allegato 2 - Requirements Breakdown Structure",
    "keywords": "",
    "url": "/PM-report/attachments/2-rbs/",
    "body": "Event Storming ðŸš§ TODO: Riportare diagramma event storming Requirements Breakdown Structure Vengono qui di seguito esplosi i requisiti del sistema, a partire dagli obiettivi definiti nel POS e sulla base dellâ€™Event Storming effettuato, nel formato di una Requirements Breakdown Structure. Progettazione, inizializzazione e configurazione dei workspace con un adeguato build tool, di unâ€™infrastruttura con predisposizione a una pipeline automatizzata di continuous integration &amp; deployment. Progettazione e implementazione di un servizio per la gestione utente. Il sistema deve poter gestire lâ€™autenticazione degli utenti; Il sistema deve poter gestire la creazione, adesione e abbandono ai gruppi (operazioni CRUD); Il sistema deve supportare una struttura gerarchica degli utenti appartenenti ad un gruppo; Il sistema deve poter gestire le informazioni relative agli utenti e lâ€™impostazione degli indirizzi preferiti. Progettazione e implementazione di un servizio di localizzazione. Il sistema deve effettuare il geocoding di indirizzi / luoghi in coordinate; Il sistema deve localizzare in tempo reale gli utenti e supportarne la condivisione con i membri del proprio gruppo; Il sistema deve gestire lo stato degli utenti in tempo reale; Il sistema deve permettere di impostare notifiche di prossimitÃ  con cui notificare gli utenti del proprio gruppo quando si raggiunge una certa posizione o se si verificano situazioni anomale (ad esempio, lâ€™utente rimane fermo per troppo tempo). Il sistema deve permettere di poter notificare gli utenti di una situazione di pericolo, iniziando a tracciare il percorso dellâ€™utente. Progettazione e implementazione di un servizio di chat. Il sistema deve permettere una comunicazione sicura; Il sistema deve permettere un canale di comunicazione tra il client e il server; Il sistema deve permettere una comunicazione (di messaggi testuali) di natura broadcast ai membri appartenenti ai gruppi. Sistema di notifiche Il sistema deve permettere lâ€™invio di notifiche push; Il sistema deve permettere lâ€™invio di notifiche mail."
  },"/PM-report/attachments/3-wbs/": {
    "title": "Allegato 3 - Work Breakdown Structure",
    "keywords": "",
    "url": "/PM-report/attachments/3-wbs/",
    "body": "A partire dalla RBS definita nel Allegato 2 - Requirements Breakdown Structure, vengono qui di seguito esplosi i requisiti del sistema elencando le attivitÃ  necessarie per soddisfarli, nel formato di una Work Breakdown Structure. Progettazione, inizializzazione e configurazione dei workspace con un adeguato build tool, di unâ€™infrastruttura con predisposizione a una pipeline automatizzata di continuous integration &amp; deployment. Configurazione build tool e DVCS Configurazione pipeline di continuous integration Configurazione pipeline di continuous deployment Progettazione diagrammi deployment Creazione struttura locale minimale di orchestrazione Configurazione ambiente di produzione Sviluppo azioni deployment da locale a produzione Configurazione bot per aggiornamento automatico delle dipendenze Configurazione bot per il merge automatizzato di Pull Request sulla repo Configurazione bot per il rilascio automatico delle release Configurazione di un sistema di ticketing automatizzato Progettazione e implementazione di un servizio per la gestione utente. Il sistema deve poter gestire lâ€™autenticazione degli utenti; Configurazione DB e implementazione schemi Implementazione token di autenticazione Regole di controllo di accesso Implementazione API di autenticazione Il sistema deve poter gestire la creazione, adesione e abbandono ai gruppi (operazioni CRUD); Configurazione DB e implementazione schemi Implementazione API di gestione gruppi Il sistema deve supportare una struttura gerarchica degli utenti appartenenti ad un gruppo; Esplorazione di plugin on the shelf Implementazione API di gestione dei ruoli Predisposizione dello storage per la gestione dei ruoli Il sistema deve poter gestire le informazioni relative agli utenti e lâ€™impostazione degli indirizzi preferiti. Progettazione e implementazione di un servizio di localizzazione. Il sistema deve effettuare il geocoding di indirizzi / luoghi in coordinate; Il sistema deve localizzare in tempo reale gli utenti e supportarne la condivisione con i membri del proprio gruppo; Il sistema deve gestire lo stato degli utenti in tempo reale; Il sistema deve permettere di impostare notifiche di prossimitÃ  con cui notificare gli utenti del proprio gruppo quando si raggiunge una certa posizione o se si verificano situazioni anomale (ad esempio, lâ€™utente rimane fermo per troppo tempo). Il sistema deve permettere di poter notificare gli utenti di una situazione di pericolo, iniziando a tracciare il percorso dellâ€™utente. Progettazione e implementazione di un servizio di chat. Il sistema deve permettere una comunicazione sicura; Il sistema deve permettere un canale di comunicazione tra il client e il server; Il sistema deve permettere una comunicazione di natura broadcast ai membri appartenenti ai gruppi. Sistema di notifiche Il sistema deve permettere lâ€™invio di notifiche push; Il sistema deve permettere lâ€™invio di notifiche mail."
  },"/PM-report/attachments/4-costs-estimation/": {
    "title": "Allegato 4 - Stima dei costi",
    "keywords": "",
    "url": "/PM-report/attachments/4-costs-estimation/",
    "body": "Vengono di seguito riportate le stime dei costi per la realizzazione del progetto. Nelle stime di implementazione qui riportate consideriamo anche i costi per il testing. AttivitÃ  1.1 Configurazione build tool e DVCS Stime Luca Rubboli Giovanni Antonioni Luca Tassinari Media Mediana 3 point method Round 1 4 6 8 6,00 6 6,00 Round 2 6 6,5 7 6,50 6,5 6,50 UnitÃ  di misura: Ore Risorse assegnate: 2 Durata stimata: 4 AttivitÃ  1.2 Configurazione pipeline di continuous integration Stime Luca Rubboli Giovanni Antonioni Luca Tassinari Media Mediana 3 point method Round 1 3 8 3 4,67 3 4,94 Round 2 4 6 6 5,33 6 5,22 Round 3 5 6 6 5,67 6 5,61 UnitÃ  di misura: Ore Risorse assegnate: 2 Durata stimata: 4,5 AttivitÃ  1.3.1 Configurazione pipeline di continuous deployment: progettazione diagrammi deployment Stime Luca Rubboli Giovanni Antonioni Luca Tassinari Media Mediana 3 point method Round 1 4 10 3 5,67 4 5,94 Round 2 6 6 8 6,67 6 6,78 Round 3 6,5 6,5 7,5 6,83 6,5 6,89 UnitÃ  di misura: Ore Risorse assegnate: 3 progettisti che collaborano in brainstorming Durata stimata: 3 AttivitÃ  1.3.2 Configurazione pipeline di continuous deployment: Creazione struttura locale minimale di orchestrazione Stime Luca Rubboli Giovanni Antonioni Luca Tassinari Media Mediana 3 point method Round 1 10 2 6 6,00 6 6,00 Round 2 5 4.5 3 4,00 4 4,00 Round 3 4.5 4.5 4 4,00 4 4,00 UnitÃ  di misura: Ore Risorse assegnate: 1 esperto di deployment Durata stimata: 4 AttivitÃ  1.3.3: Configurazione pipeline di continuous deployment: Configurazione ambiente di produzione Stime Luca Rubboli Giovanni Antonioni Luca Tassinari Media Mediana 3 point method Â  Round 1 4 6 2 4,00 4 4,00 Â  Round 2 5 6 4,5 5,17 5 5,19 Â  Round 3 5 6 5,5 Â  5,50 5,5 5,50 UnitÃ  di misura: Ore Risorse assegnate: 1 Durata stimata: 5,5 AttivitÃ  1.3.4 Configurazione pipeline di continuous deployment: Sviluppo azioni deployment da locale a produzione Stime Luca Rubboli Giovanni Antonioni Luca Tassinari Media Mediana 3 point method Round 1 8 10 8 8,67 8 8,78 Round 2 9 9 10 9,33 9 9,39 Round 3 9 9,5 9,5 9,33 9,5 9,31 UnitÃ  di misura: Ore Risorse assegnate: 1 Durata stimata: 9,5 AttivitÃ  1.4 Configurazione bot per aggiornamento automatico delle dipendenze Stime Luca Rubboli Giovanni Antonioni Luca Tassinari Media Mediana 3 point method Round 1 3 0.5 2 2,50 2,5 2,50 Round 2 1,5 1,5 1,5 1,50 1,5 1,50 UnitÃ  di misura: Ore Risorse assegnate: 1 Durata stimata: 1,5 AttivitÃ  1.5 Configurazione bot per il merge automatizzato di Pull Request sulla repo Stime Luca Rubboli Giovanni Antonioni Luca Tassinari Media Mediana 3 point method Â  Round 1 2 2 1,5 Â  1,83 2 1,81 Round 2 2 2 1,75 Â  1,92 2 1,90 UnitÃ  di misura: Ore Risorse assegnate: 1 Durata stimata: 2 AttivitÃ  1.6 Configurazione bot per il rilascio automatico delle release Stime Luca Rubboli Giovanni Antonioni Luca Tassinari Media Mediana 3 point method Round 1 3 3 2,5 2,83 3 2,81 Round 2 2,75 3 2,5 2,75 2,75 2,75 UnitÃ  di misura: Ore Risorse assegnate: 1 Durata stimata: 2,75 AttivitÃ  1.7 Configurazione di un sistema di ticketing automatizzato Stime Luca Rubboli Giovanni Antonioni Luca Tassinari Media Mediana 3 point method Round 1 0,5 0,5 0,5 0,50 0,5 0,50 UnitÃ  di misura: Ore Risorse assegnate: 1 Durata stimata: 0,5"
  },"/PM-report/attachments/5-risk-analysis/": {
    "title": "Allegato 5 - Risk Analysis",
    "keywords": "",
    "url": "/PM-report/attachments/5-risk-analysis/",
    "body": "Identificazione dei rischi TECNICO: il team non ha esperienza nella progettazione e sviluppo di applicazioni con architettura a micro-servizi; TECNICO: il progetto richiede lâ€™utilizzo di tecnologie e strumenti sconosciuti ai membri del team di svliuppo; TECNICO: il team ha limitata esperienza riguardo lâ€™utilizzo di tecnologie e strumenti per il continuous depoloyment in ambienti di produzione; ORGANIZZATIVO: rischio di sforare il budget; ORGANIZZATIVO: vista la poca esperienza e altri progetti in corso provocare ritardi nella consegna; ESTERNO: il sistema finale potrebbe avere meno appeal rispetto a quello dei competitor nel mercato. Assessment Legenda: I livelli di impatto e prioritÃ  sono categorizzati in 4 livelli: B: Bassa M: Media A: Alta C: Critica Categoria di rischio Scope Evento # Evento ProbabilitÃ  Impatto PrioritÃ  TECNICO QualitÃ  TC1 Mancata qualitÃ  dovuta allâ€™inesperienza del team di sviluppo 0.6 C A TECNICO QualitÃ  TC2 Le tecnologie CI/CD ritardano il rilascio in produzione 0.3 A A TECNICO QualitÃ  TC3 Il mal utilizzo delle tecnologie adottate provoca un deterioramento dei QoS (Quality of Services) 0.8 C C ORGANIZZATIVO Budget OR1 Sforamento del budget 0.1 M B ORGANIZZATIVO Budget OR2 Ritardi nella consegna 0.5 M M ESTERNO Mercato ES1 Il sistema finale ha meno appeal rispetto ai competitor 0.9 B B quadrantChart title Matrice dei rischi y-axis Bassa probabilita --&gt; Alta probabilita x-axis Impatto basso --&gt; Impatto alto TC1: [0.9, 0.6] TC2: [0.76, 0.3] TC3: [0.95, 0.8] OR1: [0.5, 0.1] OR2: [0.5, 0.5] ES1: [0.05 , 0.9] Gestione dei rischi Evento # Gestione Descrizione TC1 Mitigate Formazione del team sullâ€™architettura a microservizi TC2 Mitigate Formazione del team sulle tecnologie CI/CD TC3 Mitigate Formazione del team sulle tecnologie presenti nel mercato OR1 Accept Â  OR2 Contingency Planning In caso di ritardi le funzionalitÃ  opzionali vengono scartate ES1 Accept Â "
  },"/PM-report/report/1-scoping/": {
    "title": "Scoping",
    "keywords": "",
    "url": "/PM-report/report/1-scoping/",
    "body": "Contesto Luca R., Giovanni A., Luca T. sono quattro studenti di Ingegneria e Scienze Informatiche dellâ€™UniversitÃ  di Bologna che, a fronte di alcune notizie lette recentemente di ragazzi e ragazze che tornando a casa di notte in zone poco sicure della cittÃ  condividono la loro posizione in un gruppo WhatsApp per sostenersi e sorvegliarsi a vicenda, si sono posti come obiettivo quello di creare un sistema software open source di tracciamento della posizione specificatamente progettato e studiato per creare una rete di supporto e assistenza efficace e tempestiva, in grado di segnalare in maniera rapida una situazione di emergenza. Essendo un progetto open source nato in contesto universitario da alcuni studenti con lâ€™obiettivo di apprendere nuove tecnologie, pattern di progettazione, nonchÃ© nuove metodologie di sviluppo, non câ€™Ã¨ un vero e proprio committente, nÃ© una singola figura che lo rappresenta. Al contrario, tutti i membri del team collaborano attivamente per cercare di capire e individuare al meglio tutti i possibili bisogni e desideri dellâ€™utenza finale del prodotto. Lâ€™analisi, in termini di project management, verterÃ  sulla valutazione dei criteri di successo e dei rischi che possono accompagnare alcune scelte, oltre che allâ€™individuazione e decomposizione delle macro-attivitÃ  in unitÃ  piÃ¹ piccole, a cui seguirÃ  una stima dei tempi di lavoro previsti e i deliverables attesi. Da un punto di vista tecnico, i membri del team hanno recentemente avuto modo di seguire corsi riguardo a come progettare applicazioni software di medio/grandi dimensioni sfruttando approcci guidati dal dominio (domain-driven), architetture distribuite a micro-servizi, e hanno avuto modo di apprezzare lâ€™importanza di applicare metodologie di sviluppo DevOps in cui lâ€™automatizzazione dei processi e lâ€™integrazione continua di codice funzionante (working code) in produzione in maniera completamente automatizzata Ã¨ un fattore di primaria importanza. Per queste ragioni il progetto software e il suo processo di sviluppo sarÃ  improntato seguendo queste fondamentali linee guida. Riunione di definizione del progetto (scoping meeting) Scopo: individuazione delle aspettative e dei requisiti dellâ€™applicazione. Partecipanti della riunione: Membro Ruolo Luca Rubboli Facilitatore Luca Tassinari Core Team member Giovanni Antonioni Core Team member Agenda: introduzione (ad opera del facilitatore); scopo della riunione (ad opera del facilitatore); descrizione dellâ€™opportunitÃ  di business; discussione delle conditions of satisfaction; descrizione dei derivable del progetto; descrizione dei requisiti e della documentazione tramite event storming; scelta del modello PMLC da seguire; bozza e approvazione del POS; Sintesi svolgimento: Per fini di brevitÃ , aggreghiamo la sintesi e i risultati delle prime 3 riunioni, tenute da tutti i componenti del gruppo, nelle quali sono stati definiti gli obiettivi principali del progetto, sono stati formalizzati i requisiti e i criteri di accettazione. In dettaglio, lâ€™analisi Ã¨ stata raffinata incrementalmente, inizialmente definendo gli obiettivi generali del progetto, da cui sono emerse le opportunitÃ  e i rischi correlati; parallelamente, sono state stilate le condizioni e criteri di successo del sistema. ðŸ“‚ Allegato Il POS Ã¨ riportato nellâ€™Allegato 1 Al fine di estrarre le principali funzionalitÃ  dellâ€™applicativo nel modo piÃ¹ rapido ed efficace possibile, Ã¨ stato utilizzato Event Storming, una tecnica di modellazione collaborativa e visuale particolarmente utilizzata e apprezzata nel contesto di sviluppo agile e Domain-Driven. La sua potenza deriva da un gruppo eterogeneo e multidisciplinare di esperti, dagli architetti ai product owner, passando per i designer dellâ€™UI/UX ai tester, che, insieme, collaborano per estrarre le principali funzionalitÃ  e i processi che le guidano, condividendo questa conoscenza per far sÃ¬ che sia condivisa al di lÃ  dei compartimenti stagni di ciascun team. Inoltre, questo approccio consente di uniformare il linguaggio utilizzato (quello che in DDD Ã¨ detto ubiquitous language) e di sollevare e poi risolvere eventuali ambiguitÃ  o incomprensioni che possono emergere sin dalle prime fasi del progetto. Dopo aver introdotto brevemente quali sono i vantaggi nellâ€™utilizzo di questa tecnica rispetto a un approccio piÃ¹ tradizionale, Ã¨ stato quindi illustrato a tutti i componenti del gruppo come si svolge una sessione di Event Storming. Si parte da un problema o da un obiettivo e, attraverso lâ€™uso di stickynotes colorate e markers, si procede a mappare i processi e le interazioni tra le varie entitÃ  coinvolte, in modo da ottenere una visione dâ€™insieme del sistema e delle sue interazioni. PiÃ¹ in dettaglio, la sessione inizia con lâ€™identificazione dei domain event, ovvero gli eventi relativi al dominio che si sta esplorando che rappresentano qualcosa di interessante che Ã¨ accaduto (per questo si usa il passato) e che possa essere utile per il sistema. Questi vengono disposti in sequenza temporale in modo da creare una timeline che rappresenti il flusso di eventi che si verificano nel sistema. A questo punto si procede con lâ€™identificazione dei commands, ovvero azioni che possono essere eseguite sul sistema da parte di un attore, e delle policy con cui il sistema reagisce, andando ad arricchire la timeline seguendo il flusso di eventi e azioni. Infine si pongono in evidenza i read models, ovvero qualunque informazione che il sistema deve mostrare allâ€™utente. La struttura da seguire viene riassunta di seguito: ðŸ“‚ Allegato Lo schema risultante dellâ€™Event Storming Ã¨ riportato, insieme allâ€™RBS, nellâ€™Allegato 2 Attraverso la stesura dei requirements in una struttura gerarchica Ã¨ stato possibile identificare anche un ordine di produzione delle macro-componenti, al fine di favorire inizialmente uno sviluppo che giovi dei benefici offerti dalla continuous integration fin dallâ€™inizio, e una struttura di testing incrementale. Essendo in uno scenario di incertezza tecnologica che necessita di una componente esplorativa, abbiamo ritenuto che il modello che piÃ¹ si presti a queste esigenze sia quello adattativo: questa scelta permette di accogliere e adeguarsi ai cambiamenti, derivanti dalla raccolta di nuove informazioni che possono emergere durante il ciclo di vita del progetto. TODO: I REQUISITI COME LI VALIDIAMO?"
  },"/PM-report/report/2-planning/": {
    "title": "Planning",
    "keywords": "",
    "url": "/PM-report/report/2-planning/",
    "body": "Dopo la fase di scoping il team ha chiari gli obiettivi del progetto e le funzionalitÃ  che il sistema dovrÃ  offrire. Per poter procedere con la fase esecutiva, comprensiva di design e implementazione, Ã¨ necessario pianificare le attivitÃ  da svolgere, stimarne i costi e produrre una schedula che permetta di monitorare lâ€™avanzamento del progetto. Project Planning I sessione Scopo: Partecipanti della riunione: Agenda: Generazione e validazione della WBS; Stima della quantitÃ  di lavoro, della durata e delle risorse richieste; La riunione Ã¨ iniziata con la generazione della Work Breakdown Structure (WBS) come estensione della RBS, uno strumento fondamentale per suddividere il progetto in attivitÃ  piÃ¹ piccole, gestibili e stimabili. Successivamente, la WBS Ã¨ stata validata attraverso il confronto con gli stakeholder chiave, assicurandosi che tutte le componenti fossero coperte e non ci fossero aree di lavoro omesse. ðŸ“‚ Allegato La WBS risultante Ã¨ presentata nellâ€™Allegato 3 - Work Breakdown Structure. Una volta completata la WBS, il team ha proceduto con la stima delle attivitÃ , calcolando la quantitÃ  di lavoro, la durata e le risorse necessarie per completare ciascuna attivitÃ . La stima delle attivitÃ  Ã¨ stata condotta in modo iterativo, utilizzando diverse tecniche per affinare il piÃ¹ possibile la precisione delle previsioni: Media; Mediana; 3 Point Method: Ãˆ stato applicato per includere nelle stime tre valori: ottimistico, pessimista e realistico, e quindi calcolare una stima ponderata. Il team ha iterato su questi metodi fino a ottenere una convergenza accettabile (di quanto?). II sessione Creazione del diagramma delle dipendenze; Individuazione e discussione del critical path e delle date previste per il completamento del progetto e delle diverse milestone; Analisi della schedula e della sua compressione, se necessario; Identificazione dei rischi e degli eventuali piani di mitigazione; Consenso tra tutti i partecipanti"
  },"/PM-report/report/3-launching-execution/": {
    "title": "Launching / Execution",
    "keywords": "",
    "url": "/PM-report/report/3-launching-execution/",
    "body": "Il presente documento ha lo scopo di illustrare le attivitÃ  di lancio e di esecuzione del progetto. TODO: Kick-off meeting Matrice di assegnazione delle responsabilitÃ  Regole operative per il team Gestione cambiamenti scope"
  },"/PM-report/report/4-monitoring/": {
    "title": "Monitoring &amp; Controlling",
    "keywords": "",
    "url": "/PM-report/report/4-monitoring/",
    "body": "TODO: Sistema di reporting"
  },"/PM-report/report/5-closing/": {
    "title": "Closing &amp; Acceptance",
    "keywords": "",
    "url": "/PM-report/report/5-closing/",
    "body": "TODO: Procedura di accettazione Installazione Documentazione Post-implementation Audit"
  }}
